// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services/tax_calculation.go
//
// Generated by this command:
//
//	mockgen -package=mock -source=./internal/services/tax_calculation.go -destination=./mock/tax_calculation.go
//

// Package mock is a generated GoMock package.
package mock

import (
	models "capital-gain/internal/models"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaxCalculation is a mock of TaxCalculation interface.
type MockTaxCalculation struct {
	ctrl     *gomock.Controller
	recorder *MockTaxCalculationMockRecorder
	isgomock struct{}
}

// MockTaxCalculationMockRecorder is the mock recorder for MockTaxCalculation.
type MockTaxCalculationMockRecorder struct {
	mock *MockTaxCalculation
}

// NewMockTaxCalculation creates a new mock instance.
func NewMockTaxCalculation(ctrl *gomock.Controller) *MockTaxCalculation {
	mock := &MockTaxCalculation{ctrl: ctrl}
	mock.recorder = &MockTaxCalculationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaxCalculation) EXPECT() *MockTaxCalculationMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockTaxCalculation) Execute(operations []models.CapitalGainInput) []*models.CapitalGainOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", operations)
	ret0, _ := ret[0].([]*models.CapitalGainOutput)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockTaxCalculationMockRecorder) Execute(operations any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTaxCalculation)(nil).Execute), operations)
}
